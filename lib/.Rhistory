version
library("dplyr", lib.loc="~/anaconda3/lib/R/library")
library("ggplot2", lib.loc="~/anaconda3/lib/R/library")
library("Matrix", lib.loc="~/anaconda3/lib/R/library")
packages.used=c("gbm", "caret","DMwR" ,"nnet","randomForest","EBImage","e1071")
if(length(packages.needed)>0){
install.packages(packages.needed, dependencies = TRUE)
}
packages.needed=setdiff(packages.used,
intersect(installed.packages()[,1],
packages.used))
if(length(packages.needed)>0){
install.packages(packages.needed, dependencies = TRUE)
}
sift.features=read.csv("../data/sift_features.csv", header = T)
View(sift.features)
dim(sift.features)
lbp=read.csv("../data/lbp.csv", header = F)
label=read.csv("../data/labels.csv")
source("../lib/train.r")
source("../lib/test.r")
install.packages("gbm")
source("../lib/train.r")
library("gbm")
install.packages("gbm")
install.packages("~/Desktop/gbm_2.1.3.tar.gz", repos = NULL, type = "source")
library(gbm)
library(caret)
library(DMwR)
library(nnet)
library(randomForest)
library(e1071)
install.packages(e1071)
install.packages("e1071")
install.packages("gbm",repos = `http://cran.uk.r-project.org/src/contrib/PACKAGES')
)
)))
da.;'.CA
'
C A}
AZ
XCA'CD;'.C>C
">cdx"
/cz./V?>ZX.''
//
xz/
cA?
/
1``
/
1
`/`
install.packages("~/Desktop/gbm_2.1.3.tgz", repos = NULL, type = .Platform$pkgType)
source("../lib/train.r")
library("gbm")
install.packages("~/Desktop/gbm_2.1.3.tgz", repos = NULL, type = .Platform$pkgType)
library("gbm", lib.loc="~/anaconda3/lib/R/library")
source("../lib/train.r")
source("../lib/test.r")
all=data.frame(cbind(label,t(sift.features)))
all=data.frame(cbind(label,t(sift.features)))
set.seed(1)
set.seed(1)
test.index=sample(1:2000,400,replace=F)
colnames(all)[1]="y"
test.sift=all[test.index,]
test.x.sift=test.sift[,-1]
train.sift=all[-test.index,]
baseline.model=train.baseline(train.sift)
library(gbm)
library(caret)
library(DMwR)
library(nnet)
library(randomForest)
library(e1071)
train.baseline=function(train.data)
{
gbm1=gbm(y~.,data=train.data,dist="adaboost",n.tree = 400,shrinkage=0.1)
n=gbm.perf(gbm1)
return(list(gbm=gbm1,n=n))
}
install.packages("DMwR")
library(gbm)
library(caret)
library(DMwR)
library(nnet)
library(randomForest)
library(e1071)
train.baseline=function(train.data)
{
gbm1=gbm(y~.,data=train.data,dist="adaboost",n.tree = 400,shrinkage=0.1)
n=gbm.perf(gbm1)
return(list(gbm=gbm1,n=n))
}
install.packages("e1071")
install.packages('MMWr', dependencies = TRUE)
install.packages('DMwE', dependencies = TRUE)
install.packages('DMwR', dependencies = TRUE)
packages.used=c("gbm", "caret","DMwR" ,"nnet","randomForest","EBImage","e1071")
packages.needed=setdiff(packages.used,
intersect(installed.packages()[,1],
packages.used))
if(length(packages.needed)>0){
install.packages(packages.needed, dependencies = TRUE)
}
packages.needed=setdiff(packages.used,
intersect(installed.packages()[,1],
packages.used))
library("gbm", lib.loc="~/anaconda3/lib/R/library")
install.packages("DMwR")
packages.used=c("gbm", "caret","DMwR" ,"nnet","randomForest","EBImage","e1071")
packages.needed=setdiff(packages.used,
intersect(installed.packages()[,1],
packages.used))
if(length(packages.needed)>0){
install.packages(packages.needed, dependencies = TRUE)
}
source("http://bioconductor.org/biocLite.R")
biocLite("EBImage")
packages.used=c("gbm", "caret","DMwR" ,"nnet","randomForest","EBImage","e1071")
packages.needed=setdiff(packages.used,
intersect(installed.packages()[,1],
packages.used))
packages.needed=setdiff(packages.used,
intersect(installed.packages()[,1],
packages.used))
packages.used=c("gbm", "caret","DMwR" ,"nnet","randomForest","EBImage","e1071")
packages.needed=setdiff(packages.used,
intersect(installed.packages()[,1],
packages.used))
if(length(packages.needed)>0){
install.packages(packages.needed, dependencies = TRUE)
}
source("http://bioconductor.org/biocLite.R")
biocLite("EBImage")
packages.used=c("gbm", "caret","DMwR" ,"nnet","randomForest","EBImage","e1071")
packages.needed=setdiff(packages.used,
intersect(installed.packages()[,1],
packages.used))
install.packages("e1071", type ="source")
setwd("~/")
read.csv("lbp_feature.csv")
a = read.csv("lbp_feature.csv")
a = read.csv("lbp_feature.csv")
a
a = read.table("sampleList.txt")
View(a)
a = read.table("lbp_feature.txt")
a
a = read.table("lbp_feature.txt")
a = read.table("lbp_feature.txt")
train<-function(X, y, depth, shrinkage){
library('gbm')
fit_gbm = gbm.fit(X, y,
distribution = "multinomial",
n.trees = 250,
interaction.depth = depth,
shrinkage = shrinkage,
bag.fraction = 0.5,
verbose=FALSE)
best_iter <- gbm.perf(fit_gbm, method="OOB", plot.it = FALSE)
return(list(fit=fit_gbm, iter=best_iter))
}
test = function(fit_train, dat_test){
library("gbm")
pred <- predict(fit_train$fit, newdata = dat_test,
n.trees = fit_train$iter,
type="response")
return(as.numeric(pred> 0.5))
}
cv.function<-function(X, y, depth, shrinkage, K=5){
n = length(y)
n.fold = floor(n/K)
s = sample(rep(1:K, c(rep(n.fold, K-1), n-(K-1)*n.fold)))
cv.error = rep(NA, K)
for (i in 1:K){
train.data = X[s != i,]
train.label = y[s != i]
test.data = X[s == i,]
test.label = y[s == i]
fit = train(train.data, train.label, depth, shrinkage)
pred = test(fit, test.data)
cv.error[i] = mean(pred != test.label)
}
return(c(mean(cv.error),sd(cv.error)))
}
depths = c(3, 5, 7, 9, 11)
shrinkages = 0.1
err_cv = array(dim=c(length(depths),2))
library("EBImage")
library("gbm")
library("caret")
library("DMwR")
library("nnet")
library("randomForest")
library("e1071")
setwd("/Users/sijian/Documents/Github/Fall2017-project3-fall2017-project3-grp6/doc")
sift.feature=read.csv("../data/sift_feature.csv", header = T)
lbp.feature=read.csv("../data/lbp_feature.csv", header = F)
hog.feature = read.csv("../data/hog_feature.csv")
label=read.csv("../data/trainlabel.csv")
source("../lib/tune gbm.r")
sift_data=data.frame(cbind(label,sift.feature[,-1]))
test.index=sample(1:2000,400,replace=F)
colnames(sift_data)[2]="y"
sift_data = sift_data[,-1]
test.sift=sift_data[test.index,]
test.x.sift=test.sift[,-1]
train.sift=sift_data[-test.index,]
source("../lib/tune gbm.r")
sift_data=data.frame(cbind(label,sift.feature[,-1]))
test.index=sample(1:2000,400,replace=F)
colnames(sift_data)[2]="y"
sift_data = sift_data[,-1]
test.sift=sift_data[test.index,]
test.x.sift=test.sift[,-1]
train.sift=sift_data[-test.index,]
for(k in 1:length(depths)){
cat("k=", k, "\n")
err_cv[k,] <- cv.function(X, y, depths[k], shrinkage=shrinkages, K=5)  #K=5
}
View(err_cv)
err_cv
source("../lib/train.r")
source("../lib/test.r")
colnames(err_cv) = c("mean of cv.error","sd of cv.error")
rownames(err_cv) = c("depth = 3", "depth = 5", "depth = 7", "depth = 9","depth = 11")
err_cv
if(!require("EBImage")){
source("https://bioconductor.org/biocLite.R")
biocLite("EBImage")
}
packages.used=c("gbm", "caret","DMwR" ,"nnet","randomForest","e1071")
packages.needed=setdiff(packages.used,
intersect(installed.packages()[,1],
packages.used))
if(length(packages.needed)>0){
install.packages(packages.needed, dependencies = TRUE)
}
library("EBImage")
library("gbm")
library("caret")
library("DMwR")
library("nnet")
library("randomForest")
library("e1071")
setwd("/Users/sijian/Documents/Github/Fall2017-project3-fall2017-project3-grp6/doc")
# here replace it with your own path or manually set it in RStudio to where this rmd file is located.
sift.feature=read.csv("../data/sift_feature.csv", header = T)
sift.feature=read.csv("../data/sift_feature.csv", header = T)
sift.feature=read.csv("../data/sift_feature.csv", header = T)
lbp.feature=read.csv("../data/lbp_feature.csv", header = F)
hog.feature = read.csv("../data/hog_feature.csv")
label=read.csv("../data/trainlabel.csv")
source("../lib/tune gbm.r")
sift_data=data.frame(cbind(label,sift.feature[,-1]))
test.index=sample(1:2000,400,replace=F)
colnames(sift_data)[2]="y"
sift_data = sift_data[,-1]
test.sift=sift_data[test.index,]
test.x.sift=test.sift[,-1]
train.sift=sift_data[-test.index,]
write.csv(err_cv,file = "err_cv_for_baseline.csv")
View(err_cv)
test.index=sample(1:3000,400,replace=F)
test.index=sample(1:3000,500,replace=F)
test.sift=sift_data[test.index,]
test.x.sift=test.sift[,-1]
train.sift=sift_data[-test.index,]
lbpdata = data.frame(cbind(label,lbp.feature))
colnames(lbpdata)
colnames(lbpdata)[2] = "y"
sift_data=data.frame(cbind(label,sift.feature[,-1]))
test.index=sample(1:3000,500,replace=F)
colnames(sift_data)[2]="y"
sift_data = sift_data[,-1]
test.sift=sift_data[test.index,]
test.x.sift=test.sift[,-1]
train.sift=sift_data[-test.index,]
lbptest = lbpdata[test.index]
lbptest = lbpdata[test.index,]
lbpdata = data.frame(cbind(label,lbp.feature))
colnames(lbpdata)[2] = "y"
lbpdata = data.frame(cbind(label,lbp.feature))
colnames(lbpdata)[2] = "y"
test.lbp = lbpdata[test.index,]
View(test.lbp)
test.x.lbp = test.lbp[,-c(1,2)]
View(test.x.lbp)
train.lbp = lbpdata[-test.index,]
View(train.lbp)
lbpdata = data.frame(cbind(label,lbp.feature))
colnames(lbpdata)[2] = "y"
lbpdata = lbpdata[,-1]
lbpdata = data.frame(cbind(label,lbp.feature))
colnames(lbpdata)[2] = "y"
lbpdata = lbpdata[,-1]
test.lbp = lbpdata[test.index,]
test.x.lbp = test.lbp[,-1]
train.lbp = lbpdata[-test.index,]
View(train.lbp)
View(test.lbp)
source("../lib/train.r")
source("../lib/test.r")
gbm_model = train.baseline(train.lbp)
gbm.prediction = test.baseline(gbm_model,test.x.lbp)
gbm_model = train.baseline(train.lbp)
gbm_model = train.baseline(train.lbp)
source("../lib/train.r")
gbm_model = train.baseline(train.lbp)
?gbm.fit
gbm_model = train.baseline(train.lbp)
source("../lib/train.r")
gbm_model = train.baseline(train.lbp)
View(train.lbp)
source("../lib/train.r")
gbm_model = train.baseline(train.lbp)
source("../lib/train.r")
source("../lib/test.r")
View(test.x.lbp)
View(train.lbp)
source("../lib/train.r")
gbm_model = train.baseline(train.lbp)
source("../lib/train.r")
gbm_model = train.baseline(train.lbp)
?gbm.fit
source("../lib/train.r")
gbm_model = train.baseline(train.lbp)
View(train.lbp)
X = train.lbp[,-1]
y = train.lbp[,1]
gbm_model = train.baseline(train.lbp)
source("../lib/train.r")
X = train.lbp[,-1]
y = train.lbp[,1]
gbm_model = train.baseline(train.lbp)
gbm_model = train.baseline(X,y)
X = train.lbp[,-1]
y = train.lbp[,1]
source("../lib/tune gbm.r")
X = train.lbp[,-1]
y = train.lbp[,1]
source("../lib/tune gbm.r")
for(k in 1:length(depths)){
cat("k=", k, "\n")
err_cv[k,] <- cv.function(X, y, depths[k], shrinkage=shrinkages, K=5)  #K=5
}
View(err_cv)
colnames(err_cv) = c("mean of cv.error","sd of cv.error")
rownames(err_cv) = c("depth = 3", "depth = 5", "depth = 7", "depth = 9","depth = 11")
print(err_cv)
write.csv(err_cv,file = "err_cv_for_GBM+LBP.csv")
bp.model=train.bp(train)
bp.model=train.bp(train.lbp)
bp.pre=test.bp(bp.model,test.x.lbp)
table(bp.pre,test.lbp$y)
bp.model=train.bp(train.lbp)
bp.pre=test.bp(bp.model,test.x.lbp)
rf.model <- train.rf(train)
table(rf.pre,test$y)
rf.model <- train.rf(train.lbp)
rf.model <- train.rf(train.lbp)
rf.pre=test.rf(rf.model,test.x.lbp)
table(rf.pre,test.lbp$y)
svm.model <- train.svm(train)
svm.pre=test.svm(svm.model,test.x)
table(svm.pre,test$y)
svm.model <- train.svm(train.lbp)
svm.model <- train.svm(train.lbp)
svm.pre=test.svm(svm.model,test.x.lbp)
svm.pre=test.svm(svm.model,test.x.lbp)
table(svm.pre,test.lbp$y)
svm.model <- train.svm(train.lbp)
svm.model <- train.svm(train.lbp)
svm.pre=test.svm(svm.model,test.x.lbp)
svm.pre=test.svm(svm.model,test.x.lbp)
table(svm.pre,test.lbp$y)
log.model <- train.log(train.lbp)
table(log.pre, test.lbp$y)
log.model <- train.log(train.lbp)
source("../lib/train.r")
source("../lib/test.r")
log.model <- train.log(train.lbp)
source("../lib/train.r")
source("../lib/test.r")
log.model <- train.log(train.lbp)
log.pre=test.log(log.model, test.x.lbp)
table(log.pre, test.lbp$y)
log.model <- train.log(train.lbp)
log.pre=test.log(log.model, test.x.lbp)
install.packages("knitr")
library("knitr")
devtools::install_github("rstudio/rmarkdown")
knit_with_parameters('~/Documents/GitHub/Fall2017-project3-fall2017-project3-grp6/doc/main.Rmd')
H <return>
#Install necessary packages.
```{r,message=F, warning=F}
load("/Users/sijian/Documents/GitHub/fall2017-project4-fall2017-proj4-grp8/output/movie.test.Rdata")
load("/Users/sijian/Documents/GitHub/fall2017-project4-fall2017-proj4-grp8/output/movie.train.Rdata")
load("/Users/sijian/Documents/GitHub/fall2017-project4-fall2017-proj4-grp8/output/web.test.Rdata")
load("/Users/sijian/Documents/GitHub/fall2017-project4-fall2017-proj4-grp8/output/web.train.Rdata")
load("/Users/sijian/Documents/GitHub/fall2017-project4-fall2017-proj4-grp8/output/eachmovie.matrix.Rdata")
webtrain = read.csv("../data/MS_sample/data_train.csv")
############################################################
nrow = sum(webtrain[,2] == 'C')
a = which(webtrain[,2] == 'C')
b = diff(a)
ncol = max(b)
####################write matrix##########################
###########################################################
web.feature<-NULL
web.featurename<-NULL
for (i in 1:dim(webtrain)[1]){
if (webtrain[i,2] == "C"){
web.feature = c(web.feature,webtrain[i,3])
}
}
c = a+1
d = b
b2 = b
#######author: SijianXuan#########################
# make adject list data for webtrain and movietrain
library(recommenderlab)
webtrain = read.csv("../data/MS_sample/data_train.csv")
webtrain = read.csv("../data/MS_sample/data_train.csv")
setwd("~/Documents/GitHub/fall2017-project4-fall2017-proj4-grp8")
webtrain = read.csv("../data/MS_sample/data_train.csv")
setwd("~/Documents/GitHub/fall2017-project4-fall2017-proj4-grp8/lib")
webtrain = read.csv("../data/MS_sample/data_train.csv")
############################################################
nrow = sum(webtrain[,2] == 'C')
a = which(webtrain[,2] == 'C')
b = diff(a)
ncol = max(b)
####################write matrix##########################
###########################################################
web.feature<-NULL
web.featurename<-NULL
for (i in 1:dim(webtrain)[1]){
if (webtrain[i,2] == "C"){
web.feature = c(web.feature,webtrain[i,3])
}
}
c = a+1
d = b
b2 = b
for(i in 2:4151){
d[i] = b2[i] + b2[i-1]
b2[i] = d[i]
}
d[4151] = 38026
web.train.matrix<-matrix(NA,nrow = nrow, ncol = ncol)
for (x in 1:length(c)){
for(y in 1:(d[x]-c[x]+1)){
web.train.matrix[x,1:(d[y]-c[y]+1)] = webtrain[c[y]:d[y],3]
}
}
length(web.feature)
rownames(web.train.matrix) = web.feature
#####################################################
save(web.train.matrix,file="../output/web.train2.0.Rdata")
write.csv(web.train.matrix,file = "../data/web.train2.0.csv")
