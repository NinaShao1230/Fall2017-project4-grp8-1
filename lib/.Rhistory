library("nnet")
library("randomForest")
library("e1071")
setwd("/Users/sijian/Documents/Github/Fall2017-project3-fall2017-project3-grp6/doc")
sift.feature=read.csv("../data/sift_feature.csv", header = T)
lbp.feature=read.csv("../data/lbp_feature.csv", header = F)
hog.feature = read.csv("../data/hog_feature.csv")
label=read.csv("../data/trainlabel.csv")
source("../lib/tune gbm.r")
sift_data=data.frame(cbind(label,sift.feature[,-1]))
test.index=sample(1:2000,400,replace=F)
colnames(sift_data)[2]="y"
sift_data = sift_data[,-1]
test.sift=sift_data[test.index,]
test.x.sift=test.sift[,-1]
train.sift=sift_data[-test.index,]
source("../lib/tune gbm.r")
sift_data=data.frame(cbind(label,sift.feature[,-1]))
test.index=sample(1:2000,400,replace=F)
colnames(sift_data)[2]="y"
sift_data = sift_data[,-1]
test.sift=sift_data[test.index,]
test.x.sift=test.sift[,-1]
train.sift=sift_data[-test.index,]
for(k in 1:length(depths)){
cat("k=", k, "\n")
err_cv[k,] <- cv.function(X, y, depths[k], shrinkage=shrinkages, K=5)  #K=5
}
View(err_cv)
err_cv
source("../lib/train.r")
source("../lib/test.r")
colnames(err_cv) = c("mean of cv.error","sd of cv.error")
rownames(err_cv) = c("depth = 3", "depth = 5", "depth = 7", "depth = 9","depth = 11")
err_cv
if(!require("EBImage")){
source("https://bioconductor.org/biocLite.R")
biocLite("EBImage")
}
packages.used=c("gbm", "caret","DMwR" ,"nnet","randomForest","e1071")
packages.needed=setdiff(packages.used,
intersect(installed.packages()[,1],
packages.used))
if(length(packages.needed)>0){
install.packages(packages.needed, dependencies = TRUE)
}
library("EBImage")
library("gbm")
library("caret")
library("DMwR")
library("nnet")
library("randomForest")
library("e1071")
setwd("/Users/sijian/Documents/Github/Fall2017-project3-fall2017-project3-grp6/doc")
# here replace it with your own path or manually set it in RStudio to where this rmd file is located.
sift.feature=read.csv("../data/sift_feature.csv", header = T)
sift.feature=read.csv("../data/sift_feature.csv", header = T)
sift.feature=read.csv("../data/sift_feature.csv", header = T)
lbp.feature=read.csv("../data/lbp_feature.csv", header = F)
hog.feature = read.csv("../data/hog_feature.csv")
label=read.csv("../data/trainlabel.csv")
source("../lib/tune gbm.r")
sift_data=data.frame(cbind(label,sift.feature[,-1]))
test.index=sample(1:2000,400,replace=F)
colnames(sift_data)[2]="y"
sift_data = sift_data[,-1]
test.sift=sift_data[test.index,]
test.x.sift=test.sift[,-1]
train.sift=sift_data[-test.index,]
write.csv(err_cv,file = "err_cv_for_baseline.csv")
View(err_cv)
test.index=sample(1:3000,400,replace=F)
test.index=sample(1:3000,500,replace=F)
test.sift=sift_data[test.index,]
test.x.sift=test.sift[,-1]
train.sift=sift_data[-test.index,]
lbpdata = data.frame(cbind(label,lbp.feature))
colnames(lbpdata)
colnames(lbpdata)[2] = "y"
sift_data=data.frame(cbind(label,sift.feature[,-1]))
test.index=sample(1:3000,500,replace=F)
colnames(sift_data)[2]="y"
sift_data = sift_data[,-1]
test.sift=sift_data[test.index,]
test.x.sift=test.sift[,-1]
train.sift=sift_data[-test.index,]
lbptest = lbpdata[test.index]
lbptest = lbpdata[test.index,]
lbpdata = data.frame(cbind(label,lbp.feature))
colnames(lbpdata)[2] = "y"
lbpdata = data.frame(cbind(label,lbp.feature))
colnames(lbpdata)[2] = "y"
test.lbp = lbpdata[test.index,]
View(test.lbp)
test.x.lbp = test.lbp[,-c(1,2)]
View(test.x.lbp)
train.lbp = lbpdata[-test.index,]
View(train.lbp)
lbpdata = data.frame(cbind(label,lbp.feature))
colnames(lbpdata)[2] = "y"
lbpdata = lbpdata[,-1]
lbpdata = data.frame(cbind(label,lbp.feature))
colnames(lbpdata)[2] = "y"
lbpdata = lbpdata[,-1]
test.lbp = lbpdata[test.index,]
test.x.lbp = test.lbp[,-1]
train.lbp = lbpdata[-test.index,]
View(train.lbp)
View(test.lbp)
source("../lib/train.r")
source("../lib/test.r")
gbm_model = train.baseline(train.lbp)
gbm.prediction = test.baseline(gbm_model,test.x.lbp)
gbm_model = train.baseline(train.lbp)
gbm_model = train.baseline(train.lbp)
source("../lib/train.r")
gbm_model = train.baseline(train.lbp)
?gbm.fit
gbm_model = train.baseline(train.lbp)
source("../lib/train.r")
gbm_model = train.baseline(train.lbp)
View(train.lbp)
source("../lib/train.r")
gbm_model = train.baseline(train.lbp)
source("../lib/train.r")
source("../lib/test.r")
View(test.x.lbp)
View(train.lbp)
source("../lib/train.r")
gbm_model = train.baseline(train.lbp)
source("../lib/train.r")
gbm_model = train.baseline(train.lbp)
?gbm.fit
source("../lib/train.r")
gbm_model = train.baseline(train.lbp)
View(train.lbp)
X = train.lbp[,-1]
y = train.lbp[,1]
gbm_model = train.baseline(train.lbp)
source("../lib/train.r")
X = train.lbp[,-1]
y = train.lbp[,1]
gbm_model = train.baseline(train.lbp)
gbm_model = train.baseline(X,y)
X = train.lbp[,-1]
y = train.lbp[,1]
source("../lib/tune gbm.r")
X = train.lbp[,-1]
y = train.lbp[,1]
source("../lib/tune gbm.r")
for(k in 1:length(depths)){
cat("k=", k, "\n")
err_cv[k,] <- cv.function(X, y, depths[k], shrinkage=shrinkages, K=5)  #K=5
}
View(err_cv)
colnames(err_cv) = c("mean of cv.error","sd of cv.error")
rownames(err_cv) = c("depth = 3", "depth = 5", "depth = 7", "depth = 9","depth = 11")
print(err_cv)
write.csv(err_cv,file = "err_cv_for_GBM+LBP.csv")
bp.model=train.bp(train)
bp.model=train.bp(train.lbp)
bp.pre=test.bp(bp.model,test.x.lbp)
table(bp.pre,test.lbp$y)
bp.model=train.bp(train.lbp)
bp.pre=test.bp(bp.model,test.x.lbp)
rf.model <- train.rf(train)
table(rf.pre,test$y)
rf.model <- train.rf(train.lbp)
rf.model <- train.rf(train.lbp)
rf.pre=test.rf(rf.model,test.x.lbp)
table(rf.pre,test.lbp$y)
svm.model <- train.svm(train)
svm.pre=test.svm(svm.model,test.x)
table(svm.pre,test$y)
svm.model <- train.svm(train.lbp)
svm.model <- train.svm(train.lbp)
svm.pre=test.svm(svm.model,test.x.lbp)
svm.pre=test.svm(svm.model,test.x.lbp)
table(svm.pre,test.lbp$y)
svm.model <- train.svm(train.lbp)
svm.model <- train.svm(train.lbp)
svm.pre=test.svm(svm.model,test.x.lbp)
svm.pre=test.svm(svm.model,test.x.lbp)
table(svm.pre,test.lbp$y)
log.model <- train.log(train.lbp)
table(log.pre, test.lbp$y)
log.model <- train.log(train.lbp)
source("../lib/train.r")
source("../lib/test.r")
log.model <- train.log(train.lbp)
source("../lib/train.r")
source("../lib/test.r")
log.model <- train.log(train.lbp)
log.pre=test.log(log.model, test.x.lbp)
table(log.pre, test.lbp$y)
log.model <- train.log(train.lbp)
log.pre=test.log(log.model, test.x.lbp)
install.packages("knitr")
library("knitr")
devtools::install_github("rstudio/rmarkdown")
knit_with_parameters('~/Documents/GitHub/Fall2017-project3-fall2017-project3-grp6/doc/main.Rmd')
H <return>
#Install necessary packages.
```{r,message=F, warning=F}
load("/Users/sijian/Documents/GitHub/fall2017-project4-fall2017-proj4-grp8/output/movie.test.Rdata")
load("/Users/sijian/Documents/GitHub/fall2017-project4-fall2017-proj4-grp8/output/movie.train.Rdata")
load("/Users/sijian/Documents/GitHub/fall2017-project4-fall2017-proj4-grp8/output/web.test.Rdata")
load("/Users/sijian/Documents/GitHub/fall2017-project4-fall2017-proj4-grp8/output/web.train.Rdata")
load("/Users/sijian/Documents/GitHub/fall2017-project4-fall2017-proj4-grp8/output/eachmovie.matrix.Rdata")
getwd()
setwd("~/Documents/GitHub/fall2017-project4-fall2017-proj4-grp8/lib")
getwd()
webtrainAL = read.csv("../data/webtrainAL.txt")
webtestAL = read.csv("../data/webtestAL.txt")
View(webtestAL)
View(webtrainAL)
webtrainAL = read.csv("../data/webtrainAL.txt", header = FALSE)
webtestAL = read.csv("../data/webtestAL.txt", header = FALSE)
View(webtestAL)
## significance weighting
## read data as adjecent list file
webtrainAL = read.csv("../data/webtrainAL.txt", header = FALSE, sep = " ")
webtestAL = read.csv("../data/webtestAL.txt", header = FALSE, sep = " ")
webtrainAL = webtrainAL[,-1]
View(webtrainAL)
## significance weighting
## read data as adjecent list file
webtrainAL = read.csv("../data/webtrainAL.txt", header = FALSE, sep = " ")
View(webtrainAL)
## significance weighting
## read data as adjecent list file
webtrainAL = read.csv("../data/webtrainAL.txt", header = FALSE)
## significance weighting
## read data as adjecent list file
webtrainAL = read.csv("../data/webtrainAL.txt", header = FALSE, sep = " ")
## significance weighting
## read data as adjecent list file
webtrainAL = read.csv("../data/webtrainAL.txt", header = FALSE, sep = " ")
View(webtrainAL)
## significance weighting
## read data as adjecent list file
webtrainAL = read.csv("../data/webtrainAL.txt", header = FALSE, sep = " ")
webtestAL = read.csv("../data/webtestAL.txt", header = FALSE, sep = " ")
## significance weighting
## read data as adjecent list file
webtrainAL = read.csv("../data/webtrainAL.txt", header = FALSE)
View(webtrainAL)
webtrainAL = webtrainAL[,-1]
?read.csv
## significance weighting
## read data as adjecent list file
webtrainAL = read.table("../data/webtrainAL.txt", header = FALSE)
View(webtestAL)
View(webtrainAL)
## significance weighting
## read data as adjecent list file
webtrainAL = read.table("../data/webtrainAL.txt", header = FALSE,sep = " ")
## significance weighting
## read data as adjecent list file
webtrainAL = read.table("../data/webtrainAL.txt", header = FALSE, fill = TRUE)
View(webtrainAL)
## significance weighting
## read data as adjecent list file
webtrainAL = read.table("../data/webtrainAL.txt", header = FALSE, fill = TRUE)
View(webtrainAL)
## significance weighting
## read data as adjecent list file
webtrainAL = read.table("../data/webtrainAL.txt", header = FALSE)
View(webtrainAL)
## significance weighting
## read data as adjecent list file
webtrainAL = read.csv("../data/webtrainAL.txt", header = FALSE)
View(webtrainAL)
## significance weighting
## read data as adjecent list file
webtrainAL = read.csv("../data/webtrainAL.txt", header = FALSE)
webtestAL = read.csv("../data/webtestAL.txt", header = FALSE)
View(webtrainAL)
## significance weighting
## read data as adjecent list file
webtrainALlines = readLines("../data/webtestAL.txt")
length(line)
## significance weighting
## read data as adjecent list file
webtrainALlines = readLines("../data/webtrainAL.txt")
length(line)
## significance weighting
## read data as adjecent list file
webtrainALlines = readLines("../data/webtrainAL.txt")
## significance weighting
## read data as adjecent list file
webtrainALlines = readLines("../data/webtrainAL.txt")
## significance weighting
## read data as adjecent list file
webtrainALlines = readLines("../data/webtrainAL.txt")
## significance weighting
## read data as adjecent list file
webtrainALlines = readLines("../data/webtrainAL.txt")
length(line)
View(web.test)
webtestAL = read.csv("../data/webtestAL.txt", header = FALSE)
View(webtestAL)
## significance weighting
## read data as adjecent list file
webtrainAL = read.csv("../data/webtrainAL1.csv",header = FALSE)
View(webtrainAL)
View(webtrainAL)
webtestAL = read.csv("../data/webtestAL1.txt", header = FALSE)
## significance weighting
## read data as adjecent list file
webtrainAL = read.csv("../data/webtrainAL1.csv",header = FALSE)
webtestAL = read.csv("../data/webtestAL1.txt", header = FALSE)
## significance weighting
## read data as adjecent list file
webtrainAL = read.csv("../data/webtrainAL1.csv",header = FALSE)
webtestAL = read.csv("../data/webtestAL1.txt", header = FALSE)
webtestAL = read.csv("../data/webtestAL1.csv", header = FALSE)
## significance weighting
## read data as adjecent list file
webtrainAL = read.csv("../data/webtrainAL1.csv",header = FALSE)
webtestAL = read.csv("../data/webtestAL1.csv", header = FALSE)
## significance weighting
## read data as adjecent list file
webtrainAL = read.csv("../data/webtrainAL1.csv",header = FALSE)
webtestAL = read.csv("../data/webtestAL1.csv", header = FALSE)
View(webtrainAL)
## significance weighting
## read data as adjecent list file
webtrainAL = read.csv("../data/webtrainAL1.csv",header = FALSE)
## significance weighting
## read data as adjecent list file
webtrainAL = read.csv("../data/webtrainAL1.csv",header = FALSE)
View(webtrainAL)
View(webtestAL)
View(webtrainAL)
## significance weighting
## read data as adjecent list file
webtrainAL = read.csv("../data/webtrainAL1.csv",header = FALSE)
webtestAL = read.csv("../data/webtestAL1.csv", header = FALSE)
View(webtrainAL)
View(webtestAL)
mode(webtrainAL)
length(webtrainAL)
dim(webtrainAL)
View(webtrainAL)
intersect(webtrainAL[1,],webtrain[2,])
intersect(webtrainAL[1,],webtrainAL[2,])
a = intersect(webtrainAL[1,],webtrainAL[2,])
a
View(a)
count(a)
length(webtrainAL)
dim(webtrainAL)[1]
m = dim(webtrainAL)[1]
n = dim(webtrainAL)[2]
m = dim(webtrainAL)[1]
n = dim(webtrainAL)[2]
intersect(webtrainAL[1,],webtrainAL[2,])
sum(intersect(webtrainAL[1,],webtrainAL[2,]))
sum(intersect(webtrainAL[1,],webtrainAL[2,]) != NA)
!is.na(intersect(webtrainAL[1,],webtrainAL[2,])
!is.na(intersect(webtrainAL[1,],webtrainAL[2,]))
!is.na(intersect(webtrainAL[1,],webtrainAL[2,]))
sum(!is.na(intersect(webtrainAL[1,],webtrainAL[2,])))
sum(!is.na(intersect(webtrainAL[1,],webtrainAL[2,])))
sum(!is.na(intersect(webtrainAL[1,],webtrainAL[3,])))
sum(!is.na(intersect(webtrainAL[1,],webtrainAL[6,])))
m = dim(webtrainAL)[1]
n = dim(webtrainAL)[2]
a = 0
b = 0
for (i in 1:m){
for(j in 1:n){
a = sum(!is.na(intersect(webtrainAL[i,],webtrainAL[j,])))
b = b + a
}
}
for (i in 1:10){
for(j in 1:5){
a = sum(!is.na(intersect(webtrainAL[i,],webtrainAL[j,])))
b = b + a
}
}
for(j in 1:5){
a = sum(!is.na(intersect(webtrainAL[i,],webtrainAL[j,])))
b = b + a
}
m = dim(webtrainAL)[1]
n = dim(webtrainAL)[2]
a = 0
b = 0
for (i in 1:5){
for(j in 1:5){
a = sum(!is.na(intersect(webtrainAL[i,],webtrainAL[j,])))
b = b + a
}
}
sum(!is.na(intersect(webtrainAL[1,],webtrainAL[1,])))
sum(!is.na(intersect(webtrainAL[1,],webtrainAL[2,])))
sum(!is.na(intersect(webtrainAL[1,],webtrainAL[3,])))
sum(!is.na(intersect(webtrainAL[1,],webtrainAL[4,])))
sum(!is.na(intersect(webtrainAL[1,],webtrainAL[5,])))
sum(!is.na(intersect(webtrainAL[2,],webtrainAL[1,])))
sum(!is.na(intersect(webtrainAL[2,],webtrainAL[2,])))
sum(!is.na(intersect(webtrainAL[2,],webtrainAL[3,])))
sum(!is.na(intersect(webtrainAL[2,],webtrainAL[4,])))
sum(!is.na(intersect(webtrainAL[2,],webtrainAL[5,])))
for(j in 1:1){
a = sum(!is.na(intersect(webtrainAL[i,],webtrainAL[j,])))
b = b + a
}
m = dim(webtrainAL)[1]
n = dim(webtrainAL)[2]
a = 0
b = 0
for (i in 1:5){
for(j in 1:2){
a = sum(!is.na(intersect(webtrainAL[i,],webtrainAL[j,])))
b = b + a
}
}
sum(!is.na(intersect(webtrainAL[1,],webtrainAL[1,])))
sum(!is.na(intersect(webtrainAL[1,],webtrainAL[2,])))
sum(!is.na(intersect(webtrainAL[1,],webtrainAL[3,])))
sum(!is.na(intersect(webtrainAL[1,],webtrainAL[4,])))
sum(!is.na(intersect(webtrainAL[1,],webtrainAL[5,])))
sum(!is.na(intersect(webtrainAL[2,],webtrainAL[1,])))
sum(!is.na(intersect(webtrainAL[2,],webtrainAL[2,])))
sum(!is.na(intersect(webtrainAL[2,],webtrainAL[3,])))
sum(!is.na(intersect(webtrainAL[2,],webtrainAL[4,])))
sum(!is.na(intersect(webtrainAL[2,],webtrainAL[5,])))
b-
!is.na(webtrainAL)
b-
sum(!is.na(webtrainAL))
b-
sum(!is.na(webtrainAL))
b-
sum(!is.na(webtrainAL))
sum(!is.na(webtrainAL))
m = dim(webtrainAL)[1]
n = dim(webtrainAL)[2]
a = 0
b = 0
k = 0
for (i in 1:5){
for(j in 1:2){
a[k] = sum(!is.na(intersect(webtrainAL[i,],webtrainAL[j,])))
k = k + 1
}
}
a
a = 0
b = 0
k = 0
for (i in 1:5){
for(j in 1:2){
a[k] = sum(!is.na(intersect(webtrainAL[i,],webtrainAL[j,])))
k = k + 1
print(k)
}
}
for (i in 1:5){
for(j in 1:2){
a[k] = sum(!is.na(intersect(webtrainAL[i,],webtrainAL[j,])))
k = k + 1
print(k)
print(a)
}
}
a = 0
b = 0
k = 0
for (i in 1:5){
for(j in 1:2){
a[k] = sum(!is.na(intersect(webtrainAL[i,],webtrainAL[j,])))
k = k + 1
print(k)
print(a)
}
}
sum(!is.na(intersect(webtrainAL[1,],webtrainAL[1,])))
a = 0
b = 0
k = 1
a = 0
k = 1
for (i in 1:5){
for(j in 1:2){
a[k] = sum(!is.na(intersect(webtrainAL[i,],webtrainAL[j,])))
k = k + 1
print(k)
print(a)
}
}
sum(!is.na(intersect(webtrainAL[1,],webtrainAL[2,])))
sum(!is.na(intersect(webtrainAL[1,],webtrainAL[3,])))
sum(!is.na(intersect(webtrainAL[1,],webtrainAL[4,])))
sum(!is.na(intersect(webtrainAL[2,],webtrainAL[1,])))
sum(!is.na(intersect(webtrainAL[2,],webtrainAL[2,])))
m = dim(webtrainAL)[1]
n = dim(webtrainAL)[2]
a = 0
k = 1
for (i in 1:m){
for(j in 1:n){
a[k] = sum(!is.na(intersect(webtrainAL[i,],webtrainAL[j,])))
k = k + 1
}
}
mode(a)
write.csv(a,"../output/a.R")
