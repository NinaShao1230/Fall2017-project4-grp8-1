}
}
save(value_matrix, file = "../output/sn_web_sp_n=20_th=0.6.Rdata")
View(value_matrix)
data = data2
threshold = threshold2
result = t(apply(data, 1, function(x) aaa(x,threshold)))
value_matrix = matrix(0,dim(result)[1],dim(result)[2])
for(x in 1:4151){
#4151 is the dimension of 'data'
for(y in 1:n){
if(is.na(value_matrix[x,y]) == FALSE){
value_matrix[x,y] = data1[x,result[x,y]]
}
}
}
min(value_matrix)
result
View(value_matrix)
data = data1
data = data2
threshold = threshold2
result = t(apply(data, 1, function(x) aaa(x,threshold)))
result = t(apply(data, 1, function(x) aaa(x,threshold)))
value_matrix = matrix(0,dim(result)[1],dim(result)[2])
for(x in 1:4151){
#4151 is the dimension of 'data'
for(y in 1:n){
if(is.na(value_matrix[x,y]) == FALSE){
value_matrix[x,y] = data[x,result[x,y]]
}
}
}
View(value_matrix)
save(value_matrix, file = "../output/sn_web_entropy_n=20_th=8.Rdata")
data = data3
threshold = threshold3
result = t(apply(data, 1, function(x) aaa(x,threshold)))
result = t(apply(data, 1, function(x) aaa(x,threshold)))
value_matrix = matrix(0,dim(result)[1],dim(result)[2])
data = data3
threshold = threshold3
result = t(apply(data, 1, function(x) aaa(x,threshold)))
value_matrix = matrix(0,dim(result)[1],dim(result)[2])
for(x in 1:4151){
#4151 is the dimension of 'data'
for(y in 1:n){
if(is.na(value_matrix[x,y]) == FALSE){
value_matrix[x,y] = data[x,result[x,y]]
}
}
}
save(value_matrix, file = "../output/sn_web_msd_n=20_th=0.6.Rdata")
data = data4
threshold = threshold4
result = t(apply(data, 1, function(x) aaa(x,threshold)))
value_matrix = matrix(0,dim(result)[1],dim(result)[2])
for(x in 1:4151){
#4151 is the dimension of 'data'
for(y in 1:n){
if(is.na(value_matrix[x,y]) == FALSE){
value_matrix[x,y] = data[x,result[x,y]]
}
}
}
save(value_matrix, file = "../output/sn_movie_sp_n=20_th=0.4.Rdata")
data = data45
data = data5
threshold = threshold5
result = t(apply(data, 1, function(x) aaa(x,threshold)))
value_matrix = matrix(0,dim(result)[1],dim(result)[2])
for(x in 1:4151){
#4151 is the dimension of 'data'
for(y in 1:n){
if(is.na(value_matrix[x,y]) == FALSE){
value_matrix[x,y] = data[x,result[x,y]]
}
}
}
save(value_matrix, file = "../output/sn_movie_sp_n=20_th=0.6.Rdata")
View(value_matrix)
data = data4
threshold = threshold4
result = t(apply(data, 1, function(x) aaa(x,threshold)))
value_matrix = matrix(0,dim(result)[1],dim(result)[2])
for(x in 1:4151){
#4151 is the dimension of 'data'
for(y in 1:n){
if(is.na(value_matrix[x,y]) == FALSE){
value_matrix[x,y] = data[x,result[x,y]]
}
}
}
View(value_matrix)
threshold4 = 0.3
data = data4
threshold = threshold4
result = t(apply(data, 1, function(x) aaa(x,threshold)))
value_matrix = matrix(0,dim(result)[1],dim(result)[2])
for(x in 1:4151){
#4151 is the dimension of 'data'
for(y in 1:n){
if(is.na(value_matrix[x,y]) == FALSE){
value_matrix[x,y] = data[x,result[x,y]]
}
}
}
View(value_matrix)
save(value_matrix, file = "../output/sn_movie_sp_n=20_th=0.3.Rdata")
data = data6
threshold = threshold6
result = t(apply(data, 1, function(x) aaa(x,threshold)))
value_matrix = matrix(0,dim(result)[1],dim(result)[2])
for(x in 1:4151){
#4151 is the dimension of 'data'
for(y in 1:n){
if(is.na(value_matrix[x,y]) == FALSE){
value_matrix[x,y] = data[x,result[x,y]]
}
}
}
save(value_matrix, file = "../output/sn_movie_sp_n=20_th=0.9.Rdata")
View(value_matrix)
threshold6 = 0.8
data = data6
threshold = threshold6
result = t(apply(data, 1, function(x) aaa(x,threshold)))
value_matrix = matrix(0,dim(result)[1],dim(result)[2])
for(x in 1:4151){
#4151 is the dimension of 'data'
for(y in 1:n){
if(is.na(value_matrix[x,y]) == FALSE){
value_matrix[x,y] = data[x,result[x,y]]
}
}
}
save(value_matrix, file = "../output/sn_movie_sp_n=20_th=0.8.Rdata")
threshold6 = 0.7
data = data6
threshold = threshold6
result = t(apply(data, 1, function(x) aaa(x,threshold)))
value_matrix = matrix(0,dim(result)[1],dim(result)[2])
for(x in 1:4151){
#4151 is the dimension of 'data'
for(y in 1:n){
if(is.na(value_matrix[x,y]) == FALSE){
value_matrix[x,y] = data[x,result[x,y]]
}
}
}
save(value_matrix, file = "../output/sn_movie_sp_n=20_th=0.7.Rdata")
sqrt(25553025)
data = data4
threshold = threshold4
result = t(apply(data, 1, function(x) aaa(x,threshold)))
value_matrix = matrix(0,dim(result)[1],dim(result)[2])
for(x in 1:5055){
#5055 is the dimension of 'data'
for(y in 1:n){
if(is.na(value_matrix[x,y]) == FALSE){
value_matrix[x,y] = data[x,result[x,y]]
}
}
}
save(value_matrix, file = "../output/sn_movie_sp_n=20_th=0.3.Rdata")
data = data5
threshold = threshold5
result = t(apply(data, 1, function(x) aaa(x,threshold)))
value_matrix = matrix(0,dim(result)[1],dim(result)[2])
for(x in 1:5055){
#5055 is the dimension of 'data'
for(y in 1:n){
if(is.na(value_matrix[x,y]) == FALSE){
value_matrix[x,y] = data[x,result[x,y]]
}
}
}
save(value_matrix, file = "../output/sn_movie_sp_n=20_th=0.6.Rdata")
data = data6
threshold = threshold6
result = t(apply(data, 1, function(x) aaa(x,threshold)))
value_matrix = matrix(0,dim(result)[1],dim(result)[2])
for(x in 1:5055){
#5055 is the dimension of 'data'
for(y in 1:n){
if(is.na(value_matrix[x,y]) == FALSE){
value_matrix[x,y] = data[x,result[x,y]]
}
}
}
save(value_matrix, file = "../output/sn_movie_sp_n=20_th=0.7.Rdata")
View(value_matrix)
#########author Sijian Xuan
load("../output/web.sp.sig.p.Rdata")
load("../output/web.etp.sig.p.Rdata")
load("../output/web.msd.sig.p.Rdata")
load("../output/web.sp.n.p.Rdata")
load("../output/web.etp.n.p.Rdata")
load("../output/web.msd.n.p.Rdata")
load("../output/web.test.matrix.Rdata")
load("../output/web.sp.p.Rdata")
load("../output/web.etp.p.Rdata")
load("../output/web.msd.p.Rdata")
load("../output/web.simrank.p.Rdata")
load("../output/web.sp.var.p.Rdata")
source("./rank_scoring2.0.R")
source("./ranked_scoring2.0.R.R")
source("./ranked_scoring2.0.R")
rank.web.sp.sig = rank_scoring(web.sp.sig.p,web.test.matrix,5)
rank.web.msd.sig = rank_scoring(web.msd.sig.p,web.test.matrix,5)
rank.web.etp.sig = rank_scoring(web.etp.sig.p,web.test.matrix,5)
####################
# web.sp.sig.n.p_1 <- apply(web.sp.sig.n.p, 2, rank, ties.method="min")
# web.msd.sig.n.p_1 <- apply(web.msd.sig.n.p, 2, rank, ties.method="min")
# web.etp.sig.n.p_1 <- apply(web.etp.sig.n.p, 2, rank, ties.method="min")
rank.web.sp.n = rank_scoring(web.sp.n.p,web.test.matrix,5)
rank.web.msd.n = rank_scoring(web.msd.n.p,web.test.matrix,5)
rank.web.etp.n = rank_scoring(web.etp.n.p,web.test.matrix,5)
#####################
# web.sp.var.p_1 <- apply(web.sp.var.p, 2, rank, ties.method="min")
rank.web.sp.var = rank_scoring(web.sp.var.p,web.test.matrix,5)
#####################
# web.sp.p_1 <- apply(web.sp.p, 2, rank, ties.method="min")
# web.etp.p_1 <- apply(web.etp.p, 2, rank, ties.method="min")
# web.msd.p_1 <- apply(web.msd.p, 2, rank, ties.method="min")
# web.simrank.p_1 <- apply(web.simrank.p, 2, rank, ties.method="min")
rank.web.sp = rank_scoring(web.sp.p,web.test.matrix,5)
rank.web.etp = rank_scoring(web.etp.p,web.test.matrix,5)
rank.web.msd = rank_scoring(web.msd.p,web.test.matrix,5)
rank.web.simrank = rank_scoring(web.simrank.p,web.test.matrix,5)
####################
web_result = data.frame(Model = c('/', 'Significance Weighting',
'Variance Weighting', 'Neigbors'),
Spearman = c(rank.web.sp, rank.web.sp.sig,
rank.web.sp.var, rank.web.sp.n),
Entropy = c(rank.web.etp, rank.web.etp.sig,
NA, rank.web.etp.n),
Mean_Square_Diff = c(rank.web.msd, rank.web.msd.sig,
NA, rank.web.msd.n))
web_result
web_result
source("./function+for+making+prediction.R")
source("./function+for+making+prediction.R")
####### web spearman neighbor
load("../output/web.train.matrix.Rdata")
data1 = web.train.matrix
load("../output/web.sp.sim.Rdata")
web.sp.sim = (web.sp.sim - min(web.sp.sim))/(max(web.sp.sim)-min(web.sp.sim))
sim1 = web.sp.sim
load("../output/sn_web_sp_n=20_th=0.6.Rdata")
nei1 = value_matrix
######################################################
web.sp.n.p = predict.nei(data1,sim1,nei1)
source("./function+for+making+prediction.R")
####### web spearman neighbor
load("../output/web.train.matrix.Rdata")
data1 = web.train.matrix
load("../output/web.sp.sim.Rdata")
web.sp.sim = (web.sp.sim - min(web.sp.sim))/(max(web.sp.sim)-min(web.sp.sim))
sim1 = web.sp.sim
load("../output/sn_web_sp_n=20_th=0.6.Rdata")
nei1 = value_matrix
######################################################
web.sp.n.p = predict.nei(data1,sim1,nei1)
save(web.sp.n.p,file = "../output/web.sp.n.p_1e-17.Rdata")
#####################################################
####### web msd neighbor
data2 = web.train.matrix
load("../output/web.msdiff.sim.Rdata")
sim2 = web.msdiff.sim
load("../output/sn_web_msd_n=20_th=0.6.Rdata")
nei2 = value_matrix
######################################################
web.msd.n.p = predict.nei(data2,sim2,nei2)
save(web.msd.n.p,file = "../output/web.msd.n.p_1e-17.Rdata")
rank.web.sp.n = rank_scoring(web.sp.n.p,web.test.matrix,5)
rank.web.msd.n = rank_scoring(web.msd.n.p,web.test.matrix,5)
rank.web.etp.n = rank_scoring(web.etp.n.p,web.test.matrix,5)
#####################
# web.sp.var.p_1 <- apply(web.sp.var.p, 2, rank, ties.method="min")
rank.web.sp.var = rank_scoring(web.sp.var.p,web.test.matrix,5)
#####################
# web.sp.p_1 <- apply(web.sp.p, 2, rank, ties.method="min")
# web.etp.p_1 <- apply(web.etp.p, 2, rank, ties.method="min")
# web.msd.p_1 <- apply(web.msd.p, 2, rank, ties.method="min")
# web.simrank.p_1 <- apply(web.simrank.p, 2, rank, ties.method="min")
rank.web.sp = rank_scoring(web.sp.p,web.test.matrix,5)
rank.web.etp = rank_scoring(web.etp.p,web.test.matrix,5)
rank.web.msd = rank_scoring(web.msd.p,web.test.matrix,5)
rank.web.simrank = rank_scoring(web.simrank.p,web.test.matrix,5)
####################
web_result = data.frame(Model = c('/', 'Significance Weighting',
'Variance Weighting', 'Neigbors'),
Spearman = c(rank.web.sp, rank.web.sp.sig,
rank.web.sp.var, rank.web.sp.n),
Entropy = c(rank.web.etp, rank.web.etp.sig,
NA, rank.web.etp.n),
Mean_Square_Diff = c(rank.web.msd, rank.web.msd.sig,
NA, rank.web.msd.n))
load("../output/web.sp.n.p_1e-17.Rdata")
load("../output/web.msd.n.p_1e-17.Rdata.Rdata")
load("../output/web.msd.n.p_1e-17.Rdata")
rank.web.sp.n = rank_scoring(web.sp.n.p,web.test.matrix,5)
rank.web.msd.n = rank_scoring(web.msd.n.p,web.test.matrix,5)
source("./ranked_scoring2.0.R")
rank.web.sp.n = rank_scoring(web.sp.n.p,web.test.matrix,5)
rank.web.msd.n = rank_scoring(web.msd.n.p,web.test.matrix,5)
load("../output/web.sp.sig.p.Rdata")
load("../output/web.etp.sig.p.Rdata")
load("../output/web.msd.sig.p.Rdata")
load("../output/web.sp.n.p_1e-17.Rdata")
load("../output/web.etp.n.p.Rdata")
load("../output/web.msd.n.p_1e-17.Rdata")
load("../output/web.test.matrix.Rdata")
load("../output/web.sp.p.Rdata")
load("../output/web.etp.p.Rdata")
load("../output/web.msd.p.Rdata")
load("../output/web.simrank.p.Rdata")
load("../output/web.sp.var.p.Rdata")
source("./ranked_scoring2.0.R")
rank.web.sp.sig = rank_scoring(web.sp.sig.p,web.test.matrix,5)
rank.web.msd.sig = rank_scoring(web.msd.sig.p,web.test.matrix,5)
rank.web.etp.sig = rank_scoring(web.etp.sig.p,web.test.matrix,5)
####################
# web.sp.sig.n.p_1 <- apply(web.sp.sig.n.p, 2, rank, ties.method="min")
# web.msd.sig.n.p_1 <- apply(web.msd.sig.n.p, 2, rank, ties.method="min")
# web.etp.sig.n.p_1 <- apply(web.etp.sig.n.p, 2, rank, ties.method="min")
rank.web.sp.n = rank_scoring(web.sp.n.p,web.test.matrix,5)
rank.web.msd.n = rank_scoring(web.msd.n.p,web.test.matrix,5)
rank.web.etp.n = rank_scoring(web.etp.n.p,web.test.matrix,5)
#####################
# web.sp.var.p_1 <- apply(web.sp.var.p, 2, rank, ties.method="min")
rank.web.sp.var = rank_scoring(web.sp.var.p,web.test.matrix,5)
#####################
# web.sp.p_1 <- apply(web.sp.p, 2, rank, ties.method="min")
# web.etp.p_1 <- apply(web.etp.p, 2, rank, ties.method="min")
# web.msd.p_1 <- apply(web.msd.p, 2, rank, ties.method="min")
# web.simrank.p_1 <- apply(web.simrank.p, 2, rank, ties.method="min")
rank.web.sp = rank_scoring(web.sp.p,web.test.matrix,5)
rank.web.etp = rank_scoring(web.etp.p,web.test.matrix,5)
rank.web.msd = rank_scoring(web.msd.p,web.test.matrix,5)
rank.web.simrank = rank_scoring(web.simrank.p,web.test.matrix,5)
####################
web_result = data.frame(Model = c('/', 'Significance Weighting',
'Variance Weighting', 'Neigbors'),
Spearman = c(rank.web.sp, rank.web.sp.sig,
rank.web.sp.var, rank.web.sp.n),
Entropy = c(rank.web.etp, rank.web.etp.sig,
NA, rank.web.etp.n),
Mean_Square_Diff = c(rank.web.msd, rank.web.msd.sig,
NA, rank.web.msd.n))
web_result
#########author Sijian Xuan
load("../output/web.sp.sig.p.Rdata")
load("../output/web.etp.sig.p.Rdata")
load("../output/web.msd.sig.p.Rdata")
load("../output/web.sp.n.p_1e-17.Rdata")
load("../output/web.etp.n.p.Rdata")
load("../output/web.msd.n.p_1e-17.Rdata")
load("../output/web.test.matrix.Rdata")
load("../output/web.sp.p.Rdata")
load("../output/web.etp.p.Rdata")
load("../output/web.msd.p.Rdata")
load("../output/web.simrank.p.Rdata")
load("../output/web.sp.var.p.Rdata")
source("./ranked_scoring2.0.R")
####################
# web.sp.sig.p_1 <- apply(web.sp.sig.p, 2, rank, ties.method="min")
# web.msd.sig.p_1 <- apply(web.msd.sig.p, 2, rank, ties.method="min")
# web.etp.sig.p_1 <- apply(web.etp.sig.p, 2, rank, ties.method="min")
#rank.web.sp.sig = rank_scoring(web.sp.sig.p,web.test.matrix,5)
rank.web.sp.sig = rank_scoring(web.sp.sig.p,web.test.matrix,5)
rank.web.msd.sig = rank_scoring(web.msd.sig.p,web.test.matrix,5)
rank.web.etp.sig = rank_scoring(web.etp.sig.p,web.test.matrix,5)
####################
# web.sp.sig.n.p_1 <- apply(web.sp.sig.n.p, 2, rank, ties.method="min")
# web.msd.sig.n.p_1 <- apply(web.msd.sig.n.p, 2, rank, ties.method="min")
# web.etp.sig.n.p_1 <- apply(web.etp.sig.n.p, 2, rank, ties.method="min")
rank.web.sp.n = rank_scoring(web.sp.n.p,web.test.matrix,5)
rank.web.msd.n = rank_scoring(web.msd.n.p,web.test.matrix,5)
rank.web.etp.n = rank_scoring(web.etp.n.p,web.test.matrix,5)
#####################
# web.sp.var.p_1 <- apply(web.sp.var.p, 2, rank, ties.method="min")
rank.web.sp.var = rank_scoring(web.sp.var.p,web.test.matrix,5)
#####################
# web.sp.p_1 <- apply(web.sp.p, 2, rank, ties.method="min")
# web.etp.p_1 <- apply(web.etp.p, 2, rank, ties.method="min")
# web.msd.p_1 <- apply(web.msd.p, 2, rank, ties.method="min")
# web.simrank.p_1 <- apply(web.simrank.p, 2, rank, ties.method="min")
rank.web.sp = rank_scoring(web.sp.p,web.test.matrix,5)
rank.web.etp = rank_scoring(web.etp.p,web.test.matrix,5)
rank.web.msd = rank_scoring(web.msd.p,web.test.matrix,5)
rank.web.simrank = rank_scoring(web.simrank.p,web.test.matrix,5)
####################
web_result = data.frame(Model = c('/', 'Significance Weighting',
'Variance Weighting', 'Neigbors'),
Spearman = c(rank.web.sp, rank.web.sp.sig,
rank.web.sp.var, rank.web.sp.n),
Entropy = c(rank.web.etp, rank.web.etp.sig,
NA, rank.web.etp.n),
Mean_Square_Diff = c(rank.web.msd, rank.web.msd.sig,
NA, rank.web.msd.n))
web_result
1e-17
source("./function+for+making+prediction.R")
load("../output/web.train.matrix.Rdata")
data1 = web.train.matrix
load("../output/web.sp.sim.Rdata")
web.sp.sim = (web.sp.sim - min(web.sp.sim))/(max(web.sp.sim)-min(web.sp.sim))
sim1 = web.sp.sim
load("../output/sn_web_sp_n=20_th=0.6.Rdata")
nei1 = value_matrix
######################################################
web.sp.n.p = predict.nei(data1,sim1,nei1)
web_result
rank.web.msd.sig = rank_scoring(web.msd.sig.p,web.test.matrix,5)
rank.web.msd.n = rank_scoring(web.msd.n.p,web.test.matrix,5)
rank.web.etp.n = rank_scoring(web.etp.n.p,web.test.matrix,5)
rank.web.msd.n = rank_scoring(web.msd.n.p,web.test.matrix,5)
mv(rank.web.msd)
rm(rank.web.msd)
rm(rank.web.msd.n)
source("./function+for+making+prediction.R")
load("../output/web.train.matrix.Rdata")
data1 = web.train.matrix
load("../output/web.sp.sim.Rdata")
web.sp.sim = (web.sp.sim - min(web.sp.sim))/(max(web.sp.sim)-min(web.sp.sim))
sim1 = web.sp.sim
load("../output/sn_web_sp_n=20_th=0.6.Rdata")
nei1 = value_matrix
######################################################
web.sp.n.p = predict.nei(data1,sim1,nei1)
save(web.sp.n.p,file = "../output/web.sp.n.p_1e-17.Rdata")
#####################################################
####### web msd neighbor
data2 = web.train.matrix
load("../output/web.msdiff.sim.Rdata")
sim2 = web.msdiff.sim
load("../output/sn_web_msd_n=20_th=0.6.Rdata")
nei2 = value_matrix
######################################################
web.msd.n.p = predict.nei(data2,sim2,nei2)
save(web.msd.n.p,file = "../output/web.msd.n.p_1e-17.Rdata")
load("../output/web.sp.sig.p.Rdata")
load("../output/web.etp.sig.p.Rdata")
load("../output/web.msd.sig.p.Rdata")
load("../output/web.sp.n.p_1e-17.Rdata")
load("../output/web.etp.n.p.Rdata")
load("../output/web.msd.n.p_1e-17.Rdata")
load("../output/web.test.matrix.Rdata")
load("../output/web.sp.p.Rdata")
load("../output/web.etp.p.Rdata")
load("../output/web.msd.p.Rdata")
load("../output/web.simrank.p.Rdata")
load("../output/web.sp.var.p.Rdata")
source("./ranked_scoring2.0.R")
rank.web.sp.sig = rank_scoring(web.sp.sig.p,web.test.matrix,5)
rank.web.msd.sig = rank_scoring(web.msd.sig.p,web.test.matrix,5)
rank.web.etp.sig = rank_scoring(web.etp.sig.p,web.test.matrix,5)
####################
# web.sp.sig.n.p_1 <- apply(web.sp.sig.n.p, 2, rank, ties.method="min")
# web.msd.sig.n.p_1 <- apply(web.msd.sig.n.p, 2, rank, ties.method="min")
# web.etp.sig.n.p_1 <- apply(web.etp.sig.n.p, 2, rank, ties.method="min")
rank.web.sp.n = rank_scoring(web.sp.n.p,web.test.matrix,5)
rank.web.msd.n = rank_scoring(web.msd.n.p,web.test.matrix,5)
rank.web.etp.n = rank_scoring(web.etp.n.p,web.test.matrix,5)
#####################
# web.sp.var.p_1 <- apply(web.sp.var.p, 2, rank, ties.method="min")
rank.web.sp.var = rank_scoring(web.sp.var.p,web.test.matrix,5)
#####################
# web.sp.p_1 <- apply(web.sp.p, 2, rank, ties.method="min")
# web.etp.p_1 <- apply(web.etp.p, 2, rank, ties.method="min")
# web.msd.p_1 <- apply(web.msd.p, 2, rank, ties.method="min")
# web.simrank.p_1 <- apply(web.simrank.p, 2, rank, ties.method="min")
rank.web.sp = rank_scoring(web.sp.p,web.test.matrix,5)
rank.web.etp = rank_scoring(web.etp.p,web.test.matrix,5)
rank.web.msd = rank_scoring(web.msd.p,web.test.matrix,5)
rank.web.simrank = rank_scoring(web.simrank.p,web.test.matrix,5)
####################
web_result = data.frame(Model = c('/', 'Significance Weighting',
'Variance Weighting', 'Neigbors'),
Spearman = c(rank.web.sp, rank.web.sp.sig,
rank.web.sp.var, rank.web.sp.n),
Entropy = c(rank.web.etp, rank.web.etp.sig,
NA, rank.web.etp.n),
Mean_Square_Diff = c(rank.web.msd, rank.web.msd.sig,
NA, rank.web.msd.n))
web_result
View(web.sp.n.p)
source("./function+for+making+prediction.R")
####### web spearman neighbor
load("../output/web.train.matrix.Rdata")
data1 = web.train.matrix
load("../output/web.sp.sim.Rdata")
web.sp.sim = (web.sp.sim - min(web.sp.sim))/(max(web.sp.sim)-min(web.sp.sim))
sim1 = web.sp.sim
load("../output/sn_web_sp_n=20_th=0.6.Rdata")
nei1 = value_matrix
######################################################
web.sp.n.p = predict.nei(data1,sim1,nei1)
save(web.sp.n.p,file = "../output/web.sp.n.p_1e-17.Rdata")
#####################################################
####### web msd neighbor
data2 = web.train.matrix
load("../output/web.msdiff.sim.Rdata")
sim2 = web.msdiff.sim
load("../output/sn_web_msd_n=20_th=0.6.Rdata")
nei2 = value_matrix
######################################################
web.msd.n.p = predict.nei(data2,sim2,nei2)
save(web.msd.n.p,file = "../output/web.msd.n.p_1e-17.Rdata")
View(web.sp.n.p)
